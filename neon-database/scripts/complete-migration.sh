#!/bin/bash
###############################################################################
# Complete Supabase to Neon Migration Script
###############################################################################
#
# This script performs a complete migration from Supabase to Neon:
# 1. Backs up Supabase files
# 2. Converts scripts to Neon
# 3. Updates all documentation
# 4. Removes Supabase references
# 5. Runs data import to Neon
#
# Usage: ./neon-database/scripts/complete-migration.sh
#
###############################################################################

set -e  # Exit on error

echo "================================================================================"
echo "COMPLETE SUPABASE TO NEON MIGRATION"
echo "================================================================================"
echo ""

# Check for required environment variables
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå ERROR: DATABASE_URL environment variable not set"
    echo ""
    echo "Please set your Neon connection string:"
    echo "export DATABASE_URL='postgresql://neondb_owner:...@ep-dark-smoke-adkcd3h4-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require'"
    echo ""
    exit 1
fi

# Create backup directory
BACKUP_DIR="./supabase-backup-$(date +%Y%m%d-%H%M%S)"
echo "üì¶ Creating backup directory: $BACKUP_DIR"
mkdir -p "$BACKUP_DIR"

###############################################################################
# PHASE 1: Backup Supabase Files
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 1: Backing up Supabase files"
echo "================================================================================"

echo "üì¶ Backing up Supabase scripts..."
cp -r Transparency-Map-Dataset/import-to-supabase.js "$BACKUP_DIR/" 2>/dev/null || true
cp -r dev/scripts/smart-import.js "$BACKUP_DIR/" 2>/dev/null || true
cp -r dev/scripts/get-supabase-keys.js "$BACKUP_DIR/" 2>/dev/null || true
cp -r dev/scripts/inspect-supabase.py "$BACKUP_DIR/" 2>/dev/null || true
cp -r types/supabase.ts "$BACKUP_DIR/" 2>/dev/null || true
echo "‚úÖ Supabase files backed up to $BACKUP_DIR"

###############################################################################
# PHASE 2: Update Documentation
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 2: Updating documentation to reference Neon"
echo "================================================================================"

# Update CLAUDE.md
echo "üìù Updating CLAUDE.md..."
if [ -f "CLAUDE.md" ]; then
    sed -i.bak 's/Supabase/Neon/g' CLAUDE.md
    sed -i.bak 's/supabase/neon/g' CLAUDE.md
    rm CLAUDE.md.bak
    echo "‚úÖ CLAUDE.md updated"
fi

# Update README.md
echo "üìù Updating README.md..."
if [ -f "README.md" ]; then
    sed -i.bak 's/Supabase Backend/Neon PostgreSQL Database/g' README.md
    sed -i.bak 's/Supabase integration/Neon database/g' README.md
    sed -i.bak 's/supabase/neon/g' README.md
    rm README.md.bak
    echo "‚úÖ README.md updated"
fi

###############################################################################
# PHASE 3: Rename/Remove Supabase Files
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 3: Removing Supabase-specific files"
echo "================================================================================"

echo "üóëÔ∏è  Removing Supabase utility scripts..."
rm -f dev/scripts/get-supabase-keys.js
rm -f dev/scripts/inspect-supabase.py
echo "‚úÖ Supabase utility scripts removed"

echo "üîÑ Renaming legacy files..."
if [ -f "Transparency-Map-Dataset/import-to-supabase.js" ]; then
    mv Transparency-Map-Dataset/import-to-supabase.js Transparency-Map-Dataset/import-to-supabase.js.legacy
    echo "‚úÖ import-to-supabase.js ‚Üí import-to-supabase.js.legacy"
fi

if [ -f "dev/scripts/smart-import.js" ]; then
    mv dev/scripts/smart-import.js dev/scripts/smart-import.js.legacy
    echo "‚úÖ smart-import.js ‚Üí smart-import.js.legacy"
fi

if [ -f "types/supabase.ts" ]; then
    mv types/supabase.ts types/supabase.ts.legacy
    echo "‚úÖ types/supabase.ts ‚Üí types/supabase.ts.legacy"
fi

###############################################################################
# PHASE 4: Verify Neon Scripts Exist
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 4: Verifying Neon scripts are in place"
echo "================================================================================"

SCRIPTS_OK=true

if [ ! -f "Transparency-Map-Dataset/import-to-neon.js" ]; then
    echo "‚ùå Missing: Transparency-Map-Dataset/import-to-neon.js"
    SCRIPTS_OK=false
fi

if [ ! -f "dev/scripts/smart-import-neon.js" ]; then
    echo "‚ùå Missing: dev/scripts/smart-import-neon.js"
    SCRIPTS_OK=false
fi

if [ ! -f "dev/scripts/import-rights-neon.js" ]; then
    echo "‚ùå Missing: dev/scripts/import-rights-neon.js"
    SCRIPTS_OK=false
fi

if [ "$SCRIPTS_OK" = false ]; then
    echo ""
    echo "‚ùå ERROR: Neon scripts are missing. Run setup first."
    exit 1
fi

echo "‚úÖ All Neon scripts are present"

###############################################################################
# PHASE 5: Test Neon Connection
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 5: Testing Neon database connection"
echo "================================================================================"

echo "üîå Testing connection..."
if psql "$DATABASE_URL" -c "SELECT version();" > /dev/null 2>&1; then
    echo "‚úÖ Successfully connected to Neon database"
else
    echo "‚ùå ERROR: Cannot connect to Neon database"
    echo "   Check your DATABASE_URL environment variable"
    exit 1
fi

###############################################################################
# PHASE 6: Check Schema Status
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 6: Verifying database schema"
echo "================================================================================"

echo "üìä Checking tables..."
TABLES=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
echo "   Found $TABLES tables in public schema"

# Check for specific tables
echo "üìã Verifying core tables..."
REQUIRED_TABLES=("jurisdictions" "transparency_laws" "exemptions" "rights_of_access")
MISSING_TABLES=()

for table in "${REQUIRED_TABLES[@]}"; do
    if psql "$DATABASE_URL" -t -c "SELECT 1 FROM information_schema.tables WHERE table_name='$table';" | grep -q 1; then
        echo "   ‚úÖ $table"
    else
        echo "   ‚ùå $table (MISSING)"
        MISSING_TABLES+=("$table")
    fi
done

if [ ${#MISSING_TABLES[@]} -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  WARNING: Missing tables. You may need to run migrations."
    echo "   Run: psql \"\$DATABASE_URL_UNPOOLED\" -f supabase/migrations/YOUR_MIGRATION.sql"
fi

###############################################################################
# PHASE 7: Generate TypeScript Types from Neon
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 7: Generating TypeScript types from Neon schema"
echo "================================================================================"

if command -v npx &> /dev/null; then
    echo "üìù Pulling schema from Neon..."
    if npx prisma db pull 2>/dev/null; then
        echo "‚úÖ Schema pulled successfully"

        echo "üìù Generating TypeScript types..."
        if npx prisma generate 2>/dev/null; then
            echo "‚úÖ Types generated successfully"
        else
            echo "‚ö†Ô∏è  Type generation failed (non-fatal)"
        fi
    else
        echo "‚ö†Ô∏è  Prisma db pull failed (non-fatal)"
        echo "   You may need to configure Prisma manually"
    fi
else
    echo "‚ö†Ô∏è  npx not found, skipping type generation"
    echo "   Install Node.js to generate types"
fi

###############################################################################
# PHASE 8: Clean Up Worktree Supabase Files
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 8: Cleaning up worktree Supabase files"
echo "================================================================================"

if [ -d "worktrees" ]; then
    echo "üóëÔ∏è  Removing Supabase files from worktrees..."
    find worktrees -type f \( -name "*supabase*" -o -path "*/supabase/*" \) -delete
    echo "‚úÖ Worktree Supabase files removed"
else
    echo "‚ÑπÔ∏è  No worktrees directory found"
fi

###############################################################################
# PHASE 9: Final Verification
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 9: Final verification"
echo "================================================================================"

echo "üîç Checking for remaining Supabase references..."
SUPABASE_REFS=$(grep -r "SUPABASE_URL\|SUPABASE_KEY\|@supabase/supabase-js" \
    --include="*.js" --include="*.ts" --include="*.py" \
    --exclude-dir=node_modules \
    --exclude-dir=supabase-backup-* \
    --exclude="*.legacy" \
    . 2>/dev/null | wc -l)

if [ "$SUPABASE_REFS" -gt 0 ]; then
    echo "‚ö†Ô∏è  Found $SUPABASE_REFS Supabase references still in code"
    echo "   These may need manual review"
else
    echo "‚úÖ No Supabase references found in active code"
fi

###############################################################################
# PHASE 10: Database Status Summary
###############################################################################
echo ""
echo "================================================================================"
echo "PHASE 10: Database status summary"
echo "================================================================================"

echo "üìä Current database contents:"
psql "$DATABASE_URL" -c "
SELECT
    'jurisdictions' as table_name, COUNT(*) as records FROM jurisdictions
UNION ALL
SELECT 'transparency_laws', COUNT(*) FROM transparency_laws
UNION ALL
SELECT 'exemptions', COUNT(*) FROM exemptions
UNION ALL
SELECT 'rights_of_access', COUNT(*) FROM rights_of_access
ORDER BY table_name;
" 2>/dev/null || echo "‚ö†Ô∏è  Could not query database"

###############################################################################
# COMPLETION
###############################################################################
echo ""
echo "================================================================================"
echo "MIGRATION COMPLETE!"
echo "================================================================================"
echo ""
echo "‚úÖ Supabase files backed up to: $BACKUP_DIR"
echo "‚úÖ Documentation updated to reference Neon"
echo "‚úÖ Supabase scripts renamed to .legacy"
echo "‚úÖ Neon scripts are in place and ready"
echo "‚úÖ Database connection verified"
echo ""
echo "Next steps:"
echo "1. Review the migration: ls -la $BACKUP_DIR"
echo "2. Import data if needed:"
echo "   node dev/scripts/import-rights-neon.js data/v0.12/rights/federal-rights.json"
echo "3. Verify data:"
echo "   psql \"\$DATABASE_URL\" -c 'SELECT COUNT(*) FROM jurisdictions;'"
echo "4. Test your application with Neon connection"
echo "5. Commit changes:"
echo "   git add ."
echo "   git commit -m 'Complete migration from Supabase to Neon'"
echo ""
echo "üéâ Your project is now running on Neon!"
echo ""
